#!/usr/bin/env node
"use strict";

const iterm2Version = require('iterm2-version'),
    { pipeline } = require('stream'),
    MIN_ARGS = 1,
    MAJOR_VERSION = 0,
    MIN_ITERM_VERSION = 3,
    ERROR_STATUS = 1,
    CAN_DISPLAY_IMAGES = process.env.TERM_PROGRAM === 'iTerm.app' && parseInt(iterm2Version()[MAJOR_VERSION], 10) >= MIN_ITERM_VERSION,
    { argv } = require("yargs").usage(`Fetch the chat log to a Twitch VOD.
Usage: $0 <vod_id>

vod_id is the ID from the VOD URL, optionally prefixed with v (deprecated).`)
        .string("_")
        .demand(MIN_ARGS)
        .env('TWITCH_CHATLOG')
        .option('c', {
            alias: 'color',
            default: false,
            describe: 'Colorize output',
            type: 'boolean'
        })
        .option('C', {
            alias: 'client-id',
            default: 'hdaoisxhhrc9h3lz3k24iao13crkkq8',
            defaultDescription: '(Client-ID)',
            describe: 'Twitch application client ID',
            type: 'string',
            nargs: 1
        })
        .option('l', {
            alias: 'length',
            default: 600,
            defaultDescription: '(10 min)',
            describe: 'Amount of time from the log to fetch in seconds. Gets shortened to the VOD length if bigger. 0 loads everything but is not recommended. The output will run until the next end of a log fragment.',
            type: 'number',
            nargs: 1
        })
        .option('s', {
            alias: 'start',
            default: '00:00:00',
            describe: 'Start time. Can either be a time relative to the VOD start or actual time.',
            type: 'string',
            nargs: 1
        })
        .option('e', {
            alias: 'end',
            describe: 'End time. Alternative to specifying a length. A time like for start.',
            type: 'string',
            nargs: 1
        })
        .option('r', {
            alias: 'raw',
            default: false,
            describe: 'Print the raw JSON output instead of a formatted chat log.',
            type: 'boolean'
        })
        .option('i', {
            alias: 'images',
            default: CAN_DISPLAY_IMAGES,
            describe: 'Load emote images when colorizing output in the terminal. Only works in few terminals (and should default to true there).',
            type: 'boolean'
        })
        .help('h')
        .alias('h', 'help')
        .alias('v', 'version')
        .example("$0 79240813", "Load the first ten minutes of chat for the VOD https://twitch.tv/ec0ke/v/79240813")
        .example("$0 -c --end 00:15:00 79240813", "Load the first 15 minutes of chat for the VOD and colorize the output.")
        .example("$0 79240813 --end=2016-07-20T20:37:44+0000", "Load the chat log until the given date."),
    program = require('../lib'),
    {
        TextStream,
        JSONStream
    } = require('../lib/format');

async function run() {
    const resultStream = await program.getChatlog({
        vodId: argv._.shift(),
        clientId: argv.clientId,
        start: argv.start,
        end: argv.end,
        length: argv.length
    });
    let formatter;
    if(!argv.raw) {
        formatter = new TextStream({
            colorized: argv.color,
            loadImages: argv.images,
            clientId: argv.clientId
        });
    }
    else {
        formatter = new JSONStream();
    }
    return new Promise((resolve, reject) => {
        pipeline(resultStream,
            formatter,
            process.stdout,
            (error) => {
                if(error) {
                    reject(error);
                }
                else {
                    resolve();
                }
            });
    });
}

run()
    .catch((error) => {
        console.error(error);
        process.exit(ERROR_STATUS); // eslint-disable-line no-process-exit
    });
